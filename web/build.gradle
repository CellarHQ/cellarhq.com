buildscript {
    repositories {
        jcenter()
        maven { url "http://oss.jfrog.org/repo" }
    }
    dependencies {
        classpath "io.ratpack:ratpack-gradle:0.9.8"
        classpath 'net.saliman:gradle-liquibase-plugin:1.0.0'
        classpath databaseDriver
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.2'
        classpath 'se.transmode.gradle:gradle-docker:1.2'

    }
}

apply from: "${rootDir}/gradle/codenarc.gradle"
apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'docker'
apply plugin: 'groovy'

codenarcTest.enabled = false

repositories {
    jcenter()
    maven { url "http://repo.springsource.org/repo" } // for springloaded
    maven { url "http://oss.jfrog.org/repo" }
}

dependencies {
    // SpringLoaded enables runtime hot reloading.
    // It is not part of the app runtime and is not shipped in the distribution.
    springloaded "org.springsource.loaded:springloaded:1.1.5.RELEASE"

    compile project(':model')

    compile ratpack.dependency('codahale-metrics')
    compile ratpack.dependency('h2')
    compile ratpack.dependency('hikari')
    compile ratpack.dependency('handlebars')
    compile ratpack.dependency('jackson')
    compile ratpack.dependency('pac4j')
    compile ratpack.dependency('remote')
    compile ratpack.dependency("rx")
    compile 'org.pac4j:pac4j-http:1.5.1'
    compile 'org.pac4j:pac4j-oauth:1.5.1'

    compile 'org.mindrot:jbcrypt:0.3m'
    compile 'com.github.slugify:slugify:2.1.2'

    compile 'org.hibernate:hibernate-validator:5.1.2.Final'
    compile 'javax.el:javax.el-api:2.2.4'
    compile 'org.glassfish.web:javax.el:2.2.4'

    compile 'com.amazonaws:aws-java-sdk:1.8.9.1'

    compile 'org.reflections:reflections-maven:0.9.9-RC2'
    compile 'org.imgscalr:imgscalr-lib:4.2'
    compile 'org.owasp.antisamy:antisamy:1.5.3'

    runtime 'org.codehaus.janino:janino:2.6.1'
    runtime 'com.logentries:logentries-appender:1.1.27'
    runtime 'org.slf4j:slf4j-api:1.7.7'
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    runtime 'com.lmax:disruptor:3.3.0'
    runtime 'net.kencochrane.raven:raven:5.0.1'

    testCompile "org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:2.2'
    testCompile "org.gebish:geb-spock:0.9.2"
    // Required for mocking multi arg constructor
    testRuntime "org.objenesis:objenesis:1.2"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:2.40.0"
    testCompile ratpack.dependency("remote-test")

}

docker {
    apiUsername project.hasProperty('dockerUser') ? project.dockerUser : 'invalid'
    apiPassword project.hasProperty('dockerApiPassword') ? project.dockerApiPassword : 'invalid'
    apiEmail project.hasProperty('dockerApiEmail') ? project.dockerApiEmail : 'invalid'
}

task buildDocker(type: Docker, dependsOn: 'build') {
    registry 'kyleboon'
    applicationName = 'cellarhq'
    tagVersion = 'latest'
    dockerfile = project.file('Dockerfile')

    doFirst {
        addFile project.tasks.shadowJar.archivePath
    }

    push =  project.hasProperty('push')
}

task publish(dependsOn: 'buildDocker') {

}

test.dependsOn ':model:dropAll', ':model:update'

run {
    // IMPORTANT: This is used in logback.xml to prevent us logging into logentries / sentry... maybe a better way?
    systemProperty 'DISABLE_SERVICES', true
}
