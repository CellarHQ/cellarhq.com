buildscript {
    repositories {
        jcenter()
        maven { url "http://oss.jfrog.org/repo" }
    }
    dependencies {
        classpath "io.ratpack:ratpack-gradle:0.9.8-SNAPSHOT"
        classpath 'net.saliman:gradle-liquibase-plugin:1.0.0'
        classpath databaseDriver
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.2'
        classpath 'se.transmode.gradle:gradle-docker:1.2'

    }
}

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: 'liquibase'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'docker'
apply plugin: 'idea'
apply from: "${rootDir}/gradle/codenarc.gradle"

group = 'com.cellarhq'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url "http://repo.springsource.org/repo" } // for springloaded
    maven { url "http://oss.jfrog.org/repo" }
}

dependencies {
    // SpringLoaded enables runtime hot reloading.
    // It is not part of the app runtime and is not shipped in the distribution.
    springloaded "org.springsource.loaded:springloaded:1.1.5.RELEASE"

    compile ratpack.dependency('codahale-metrics')
    compile ratpack.dependency('h2')
    compile ratpack.dependency('hikari')
    compile ratpack.dependency('handlebars')
    compile ratpack.dependency('jackson')
    compile ratpack.dependency('pac4j')
    compile ratpack.dependency('remote')
    compile ratpack.dependency("rx")
    compile 'org.pac4j:pac4j-http:1.5.1'
    compile 'org.pac4j:pac4j-oauth:1.5.1'

    compile databaseDriver
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    compile "org.jooq:jooq:${jooqVersion}"
    compile "org.jooq:jooq-meta:${jooqVersion}"
    compile "org.jooq:jooq-codegen:${jooqVersion}"

    compile 'org.mindrot:jbcrypt:0.3m'
    compile 'com.github.slugify:slugify:2.1.2'

    compile 'org.hibernate:hibernate-validator:5.1.2.Final'
    compile 'javax.el:javax.el-api:2.2.4'
    compile 'org.glassfish.web:javax.el:2.2.4'

    compile 'com.amazonaws:aws-java-sdk:1.8.9.1'

    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.0.1'
    runtime 'org.apache.logging.log4j:log4j-api:2.0.1'
    runtime 'org.apache.logging.log4j:log4j-core:2.0.1'
    runtime 'com.lmax:disruptor:3.3.0'

    testCompile "org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:2.2'
    testCompile "org.gebish:geb-spock:0.9.2"
    // Required for mocking multi arg constructor
    testRuntime "org.objenesis:objenesis:1.2"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:2.40.0"
    testCompile ratpack.dependency("remote-test")

}

test {
    // Maybe a better way, but I only want to change the runList if we're actually running tests.
    if (project.gradle.startParameter.taskNames.contains('test')
            || project.gradle.startParameter.taskNames.contains('check')) {
        System.setProperty('liquibaseRunList', 'testing')
    }
}
test.dependsOn 'dropAll', 'update'

liquibase {
    activities {
        development {
            changeLogFile 'migrations/migrations.xml'
            url 'jdbc:postgresql://localhost:15432/cellarhq'
            username 'cellarhq'
            password 'cellarhq'
        }
        testing {
            changeLogFile 'migrations/migrations.xml'
            url 'jdbc:postgresql://localhost:15432/cellarhq_testing'
            username 'cellarhq'
            password 'cellarhq'
        }

        production {
            changeLogFile 'migrations/migrations.xml'
            url 'jdbc:postgresql://cellarhq-prod.c7ovcjlune88.us-east-1.rds.amazonaws.com:5432/cellarhq'
            username 'cellarhq'
            password project.cellarhqprodpasswd
        }
    }

    // Do not include production as a default: We don't want to accidentally run prod migrations.
    runList = project.hasProperty('runList') ? project.property('runList') : 'development,testing'
}

task cellarHqDocker(type: Docker) {
    dependsOn shadowJar
    applicationName = 'cellarhq'
    tagVersion = '0.1'
    dockerfile = project.file('Dockerfile')

    doFirst {
        addFile project.tasks.shadowJar.archivePath
    }
}

build.dependsOn cellarHqDocker

task generateJooq(type: JavaExec, dependsOn: 'classes') {
    main = 'org.jooq.util.GenerationTool'
    classpath = sourceSets.main.runtimeClasspath
    args 'jooq.xml'
}
