/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables;


import com.cellarhq.generated.Indexes;
import com.cellarhq.generated.Keys;
import com.cellarhq.generated.Public;
import com.cellarhq.generated.tables.records.AccountEmailRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountEmail extends TableImpl<AccountEmailRecord> {

    private static final long serialVersionUID = -1442282836;

    /**
     * The reference instance of <code>public.account_email</code>
     */
    public static final AccountEmail ACCOUNT_EMAIL = new AccountEmail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountEmailRecord> getRecordType() {
        return AccountEmailRecord.class;
    }

    /**
     * The column <code>public.account_email.id</code>.
     */
    public final TableField<AccountEmailRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('account_email_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.account_email.version</code>.
     */
    public final TableField<AccountEmailRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.account_email.cellar_id</code>.
     */
    public final TableField<AccountEmailRecord, Long> CELLAR_ID = createField(DSL.name("cellar_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.account_email.email</code>.
     */
    public final TableField<AccountEmailRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.account_email.password</code>.
     */
    public final TableField<AccountEmailRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.CHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.account_email.created_date</code>.
     */
    public final TableField<AccountEmailRecord, Timestamp> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.account_email.modified_date</code>.
     */
    public final TableField<AccountEmailRecord, Timestamp> MODIFIED_DATE = createField(DSL.name("modified_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.account_email.last_login_attempt</code>.
     */
    public final TableField<AccountEmailRecord, Timestamp> LAST_LOGIN_ATTEMPT = createField(DSL.name("last_login_attempt"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.account_email.login_attempt_counter</code>.
     */
    public final TableField<AccountEmailRecord, Short> LOGIN_ATTEMPT_COUNTER = createField(DSL.name("login_attempt_counter"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>public.account_email</code> table reference
     */
    public AccountEmail() {
        this(DSL.name("account_email"), null);
    }

    /**
     * Create an aliased <code>public.account_email</code> table reference
     */
    public AccountEmail(String alias) {
        this(DSL.name(alias), ACCOUNT_EMAIL);
    }

    /**
     * Create an aliased <code>public.account_email</code> table reference
     */
    public AccountEmail(Name alias) {
        this(alias, ACCOUNT_EMAIL);
    }

    private AccountEmail(Name alias, Table<AccountEmailRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountEmail(Name alias, Table<AccountEmailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountEmail(Table<O> child, ForeignKey<O, AccountEmailRecord> key) {
        super(child, key, ACCOUNT_EMAIL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_ACCOUNT_EMAIL_EMAIL, Indexes.PK_ACCOUNT_EMAIL, Indexes.UNQ_ACCOUNT_EMAIL_EMAIL);
    }

    @Override
    public Identity<AccountEmailRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_EMAIL;
    }

    @Override
    public UniqueKey<AccountEmailRecord> getPrimaryKey() {
        return Keys.PK_ACCOUNT_EMAIL;
    }

    @Override
    public List<UniqueKey<AccountEmailRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountEmailRecord>>asList(Keys.PK_ACCOUNT_EMAIL, Keys.UNQ_ACCOUNT_EMAIL_EMAIL);
    }

    @Override
    public List<ForeignKey<AccountEmailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountEmailRecord, ?>>asList(Keys.ACCOUNT_EMAIL__FK_ACCOUNT_EMAIL_CELLAR_ID);
    }

    public Cellar cellar() {
        return new Cellar(this, Keys.ACCOUNT_EMAIL__FK_ACCOUNT_EMAIL_CELLAR_ID);
    }

    @Override
    public AccountEmail as(String alias) {
        return new AccountEmail(DSL.name(alias), this);
    }

    @Override
    public AccountEmail as(Name alias) {
        return new AccountEmail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountEmail rename(String name) {
        return new AccountEmail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountEmail rename(Name name) {
        return new AccountEmail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Long, String, String, Timestamp, Timestamp, Timestamp, Short> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
