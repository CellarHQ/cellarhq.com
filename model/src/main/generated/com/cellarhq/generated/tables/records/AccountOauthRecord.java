/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables.records;


import com.cellarhq.generated.tables.AccountOauth;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "account_oauth", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "pk_account_oauth", columnNames = {"id"}),
    @UniqueConstraint(name = "account_oauth_client_username_key", columnNames = {"client", "username"})
}, indexes = {
    @Index(name = "account_oauth_client_username_key", unique = true, columnList = "client ASC, username ASC"),
    @Index(name = "pk_account_oauth", unique = true, columnList = "id ASC")
})
public class AccountOauthRecord extends UpdatableRecordImpl<AccountOauthRecord> implements Record7<Long, Integer, Long, String, String, Timestamp, Timestamp> {

    private static final long serialVersionUID = -261660602;

    /**
     * Setter for <code>public.account_oauth.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.account_oauth.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 64)
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.account_oauth.version</code>.
     */
    public void setVersion(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.account_oauth.version</code>.
     */
    @Column(name = "version", nullable = false, precision = 32)
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.account_oauth.cellar_id</code>.
     */
    public void setCellarId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.account_oauth.cellar_id</code>.
     */
    @Column(name = "cellar_id", nullable = false, precision = 64)
    public Long getCellarId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.account_oauth.client</code>.
     */
    public void setClient(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.account_oauth.client</code>.
     */
    @Column(name = "client", nullable = false, length = 20)
    public String getClient() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.account_oauth.username</code>.
     */
    public void setUsername(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.account_oauth.username</code>.
     */
    @Column(name = "username", nullable = false, length = 100)
    public String getUsername() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.account_oauth.created_date</code>.
     */
    public void setCreatedDate(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.account_oauth.created_date</code>.
     */
    @Column(name = "created_date", nullable = false)
    public Timestamp getCreatedDate() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>public.account_oauth.modified_date</code>.
     */
    public void setModifiedDate(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.account_oauth.modified_date</code>.
     */
    @Column(name = "modified_date", nullable = false)
    public Timestamp getModifiedDate() {
        return (Timestamp) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Integer, Long, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, Integer, Long, String, String, Timestamp, Timestamp> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AccountOauth.ACCOUNT_OAUTH.ID;
    }

    @Override
    public Field<Integer> field2() {
        return AccountOauth.ACCOUNT_OAUTH.VERSION;
    }

    @Override
    public Field<Long> field3() {
        return AccountOauth.ACCOUNT_OAUTH.CELLAR_ID;
    }

    @Override
    public Field<String> field4() {
        return AccountOauth.ACCOUNT_OAUTH.CLIENT;
    }

    @Override
    public Field<String> field5() {
        return AccountOauth.ACCOUNT_OAUTH.USERNAME;
    }

    @Override
    public Field<Timestamp> field6() {
        return AccountOauth.ACCOUNT_OAUTH.CREATED_DATE;
    }

    @Override
    public Field<Timestamp> field7() {
        return AccountOauth.ACCOUNT_OAUTH.MODIFIED_DATE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public Long component3() {
        return getCellarId();
    }

    @Override
    public String component4() {
        return getClient();
    }

    @Override
    public String component5() {
        return getUsername();
    }

    @Override
    public Timestamp component6() {
        return getCreatedDate();
    }

    @Override
    public Timestamp component7() {
        return getModifiedDate();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public Long value3() {
        return getCellarId();
    }

    @Override
    public String value4() {
        return getClient();
    }

    @Override
    public String value5() {
        return getUsername();
    }

    @Override
    public Timestamp value6() {
        return getCreatedDate();
    }

    @Override
    public Timestamp value7() {
        return getModifiedDate();
    }

    @Override
    public AccountOauthRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountOauthRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public AccountOauthRecord value3(Long value) {
        setCellarId(value);
        return this;
    }

    @Override
    public AccountOauthRecord value4(String value) {
        setClient(value);
        return this;
    }

    @Override
    public AccountOauthRecord value5(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public AccountOauthRecord value6(Timestamp value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public AccountOauthRecord value7(Timestamp value) {
        setModifiedDate(value);
        return this;
    }

    @Override
    public AccountOauthRecord values(Long value1, Integer value2, Long value3, String value4, String value5, Timestamp value6, Timestamp value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountOauthRecord
     */
    public AccountOauthRecord() {
        super(AccountOauth.ACCOUNT_OAUTH);
    }

    /**
     * Create a detached, initialised AccountOauthRecord
     */
    public AccountOauthRecord(Long id, Integer version, Long cellarId, String client, String username, Timestamp createdDate, Timestamp modifiedDate) {
        super(AccountOauth.ACCOUNT_OAUTH);

        set(0, id);
        set(1, version);
        set(2, cellarId);
        set(3, client);
        set(4, username);
        set(5, createdDate);
        set(6, modifiedDate);
    }
}
