/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables.records;


import com.cellarhq.generated.tables.Category;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "category", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "category_pkey", columnNames = {"id"})
}, indexes = {
    @Index(name = "category_pkey", unique = true, columnList = "id ASC"),
    @Index(name = "idx_category_brewery_db_id", columnList = "brewery_db_id ASC")
})
public class CategoryRecord extends UpdatableRecordImpl<CategoryRecord> implements Record10<Long, Integer, String, String, Boolean, String, LocalDateTime, LocalDateTime, LocalDateTime, JSON> {

    private static final long serialVersionUID = 2032007123;

    /**
     * Setter for <code>public.category.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.category.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, precision = 64)
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.category.version</code>.
     */
    public void setVersion(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.category.version</code>.
     */
    @Column(name = "version", nullable = false, precision = 32)
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.category.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.category.name</code>.
     */
    @Column(name = "name", nullable = false, length = 100)
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.category.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.category.description</code>.
     */
    @Column(name = "description")
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.category.searchable</code>.
     */
    public void setSearchable(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.category.searchable</code>.
     */
    @Column(name = "searchable", nullable = false)
    public Boolean getSearchable() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.category.brewery_db_id</code>.
     */
    public void setBreweryDbId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.category.brewery_db_id</code>.
     */
    @Column(name = "brewery_db_id", length = 64)
    public String getBreweryDbId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.category.brewery_db_last_updated</code>.
     */
    public void setBreweryDbLastUpdated(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.category.brewery_db_last_updated</code>.
     */
    @Column(name = "brewery_db_last_updated")
    public LocalDateTime getBreweryDbLastUpdated() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.category.created_date</code>.
     */
    public void setCreatedDate(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.category.created_date</code>.
     */
    @Column(name = "created_date", nullable = false)
    public LocalDateTime getCreatedDate() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>public.category.modified_date</code>.
     */
    public void setModifiedDate(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.category.modified_date</code>.
     */
    @Column(name = "modified_date", nullable = false)
    public LocalDateTime getModifiedDate() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>public.category.data</code>.
     */
    public void setData(JSON value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.category.data</code>.
     */
    @Column(name = "data")
    public JSON getData() {
        return (JSON) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Integer, String, String, Boolean, String, LocalDateTime, LocalDateTime, LocalDateTime, JSON> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, Integer, String, String, Boolean, String, LocalDateTime, LocalDateTime, LocalDateTime, JSON> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Category.CATEGORY.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Category.CATEGORY.VERSION;
    }

    @Override
    public Field<String> field3() {
        return Category.CATEGORY.NAME;
    }

    @Override
    public Field<String> field4() {
        return Category.CATEGORY.DESCRIPTION;
    }

    @Override
    public Field<Boolean> field5() {
        return Category.CATEGORY.SEARCHABLE;
    }

    @Override
    public Field<String> field6() {
        return Category.CATEGORY.BREWERY_DB_ID;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Category.CATEGORY.BREWERY_DB_LAST_UPDATED;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Category.CATEGORY.CREATED_DATE;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return Category.CATEGORY.MODIFIED_DATE;
    }

    @Override
    public Field<JSON> field10() {
        return Category.CATEGORY.DATA;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public Boolean component5() {
        return getSearchable();
    }

    @Override
    public String component6() {
        return getBreweryDbId();
    }

    @Override
    public LocalDateTime component7() {
        return getBreweryDbLastUpdated();
    }

    @Override
    public LocalDateTime component8() {
        return getCreatedDate();
    }

    @Override
    public LocalDateTime component9() {
        return getModifiedDate();
    }

    @Override
    public JSON component10() {
        return getData();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public Boolean value5() {
        return getSearchable();
    }

    @Override
    public String value6() {
        return getBreweryDbId();
    }

    @Override
    public LocalDateTime value7() {
        return getBreweryDbLastUpdated();
    }

    @Override
    public LocalDateTime value8() {
        return getCreatedDate();
    }

    @Override
    public LocalDateTime value9() {
        return getModifiedDate();
    }

    @Override
    public JSON value10() {
        return getData();
    }

    @Override
    public CategoryRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CategoryRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public CategoryRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public CategoryRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public CategoryRecord value5(Boolean value) {
        setSearchable(value);
        return this;
    }

    @Override
    public CategoryRecord value6(String value) {
        setBreweryDbId(value);
        return this;
    }

    @Override
    public CategoryRecord value7(LocalDateTime value) {
        setBreweryDbLastUpdated(value);
        return this;
    }

    @Override
    public CategoryRecord value8(LocalDateTime value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public CategoryRecord value9(LocalDateTime value) {
        setModifiedDate(value);
        return this;
    }

    @Override
    public CategoryRecord value10(JSON value) {
        setData(value);
        return this;
    }

    @Override
    public CategoryRecord values(Long value1, Integer value2, String value3, String value4, Boolean value5, String value6, LocalDateTime value7, LocalDateTime value8, LocalDateTime value9, JSON value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoryRecord
     */
    public CategoryRecord() {
        super(Category.CATEGORY);
    }

    /**
     * Create a detached, initialised CategoryRecord
     */
    public CategoryRecord(Long id, Integer version, String name, String description, Boolean searchable, String breweryDbId, LocalDateTime breweryDbLastUpdated, LocalDateTime createdDate, LocalDateTime modifiedDate, JSON data) {
        super(Category.CATEGORY);

        set(0, id);
        set(1, version);
        set(2, name);
        set(3, description);
        set(4, searchable);
        set(5, breweryDbId);
        set(6, breweryDbLastUpdated);
        set(7, createdDate);
        set(8, modifiedDate);
        set(9, data);
    }
}
