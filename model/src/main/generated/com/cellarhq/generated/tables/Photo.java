/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables;


import com.cellarhq.generated.Indexes;
import com.cellarhq.generated.Keys;
import com.cellarhq.generated.Public;
import com.cellarhq.generated.tables.records.PhotoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Photo extends TableImpl<PhotoRecord> {

    private static final long serialVersionUID = 1706952642;

    /**
     * The reference instance of <code>public.photo</code>
     */
    public static final Photo PHOTO = new Photo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhotoRecord> getRecordType() {
        return PhotoRecord.class;
    }

    /**
     * The column <code>public.photo.id</code>.
     */
    public final TableField<PhotoRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.photo.version</code>.
     */
    public final TableField<PhotoRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.photo.description</code>.
     */
    public final TableField<PhotoRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.photo.original_url</code>.
     */
    public final TableField<PhotoRecord, String> ORIGINAL_URL = createField(DSL.name("original_url"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.photo.thumb_url</code>.
     */
    public final TableField<PhotoRecord, String> THUMB_URL = createField(DSL.name("thumb_url"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.photo.thumb_width</code>.
     */
    public final TableField<PhotoRecord, Short> THUMB_WIDTH = createField(DSL.name("thumb_width"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.photo.thumb_height</code>.
     */
    public final TableField<PhotoRecord, Short> THUMB_HEIGHT = createField(DSL.name("thumb_height"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.photo.large_url</code>.
     */
    public final TableField<PhotoRecord, String> LARGE_URL = createField(DSL.name("large_url"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.photo.large_width</code>.
     */
    public final TableField<PhotoRecord, Short> LARGE_WIDTH = createField(DSL.name("large_width"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.photo.large_height</code>.
     */
    public final TableField<PhotoRecord, Short> LARGE_HEIGHT = createField(DSL.name("large_height"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.photo.created_date</code>.
     */
    public final TableField<PhotoRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.photo.modified_date</code>.
     */
    public final TableField<PhotoRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>public.photo</code> table reference
     */
    public Photo() {
        this(DSL.name("photo"), null);
    }

    /**
     * Create an aliased <code>public.photo</code> table reference
     */
    public Photo(String alias) {
        this(DSL.name(alias), PHOTO);
    }

    /**
     * Create an aliased <code>public.photo</code> table reference
     */
    public Photo(Name alias) {
        this(alias, PHOTO);
    }

    private Photo(Name alias, Table<PhotoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Photo(Name alias, Table<PhotoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Photo(Table<O> child, ForeignKey<O, PhotoRecord> key) {
        super(child, key, PHOTO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHOTO_PKEY, Indexes.UNQ_PHOTO_ORIGINAL_URL);
    }

    @Override
    public UniqueKey<PhotoRecord> getPrimaryKey() {
        return Keys.PHOTO_PKEY;
    }

    @Override
    public List<UniqueKey<PhotoRecord>> getKeys() {
        return Arrays.<UniqueKey<PhotoRecord>>asList(Keys.PHOTO_PKEY, Keys.UNQ_PHOTO_ORIGINAL_URL);
    }

    @Override
    public Photo as(String alias) {
        return new Photo(DSL.name(alias), this);
    }

    @Override
    public Photo as(Name alias) {
        return new Photo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Photo rename(String name) {
        return new Photo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Photo rename(Name name) {
        return new Photo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Integer, String, String, String, Short, Short, String, Short, Short, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
