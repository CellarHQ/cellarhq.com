/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables.records;


import com.cellarhq.generated.tables.Photo;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "photo", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "pk_photo", columnNames = {"id"}),
    @UniqueConstraint(name = "unq_photo_original_url", columnNames = {"original_url"})
}, indexes = {
    @Index(name = "pk_photo", unique = true, columnList = "id ASC"),
    @Index(name = "unq_photo_original_url", unique = true, columnList = "original_url ASC")
})
public class PhotoRecord extends UpdatableRecordImpl<PhotoRecord> implements Record12<Long, Integer, String, String, String, Short, Short, String, Short, Short, Timestamp, Timestamp> {

    private static final long serialVersionUID = -956375363;

    /**
     * Setter for <code>public.photo.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.photo.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 64)
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.photo.version</code>.
     */
    public void setVersion(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.photo.version</code>.
     */
    @Column(name = "version", nullable = false, precision = 32)
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.photo.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.photo.description</code>.
     */
    @Column(name = "description", nullable = false)
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.photo.original_url</code>.
     */
    public void setOriginalUrl(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.photo.original_url</code>.
     */
    @Column(name = "original_url", nullable = false, length = 500)
    public String getOriginalUrl() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.photo.thumb_url</code>.
     */
    public void setThumbUrl(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.photo.thumb_url</code>.
     */
    @Column(name = "thumb_url", length = 500)
    public String getThumbUrl() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.photo.thumb_width</code>.
     */
    public void setThumbWidth(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.photo.thumb_width</code>.
     */
    @Column(name = "thumb_width", precision = 16)
    public Short getThumbWidth() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>public.photo.thumb_height</code>.
     */
    public void setThumbHeight(Short value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.photo.thumb_height</code>.
     */
    @Column(name = "thumb_height", precision = 16)
    public Short getThumbHeight() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>public.photo.large_url</code>.
     */
    public void setLargeUrl(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.photo.large_url</code>.
     */
    @Column(name = "large_url", length = 500)
    public String getLargeUrl() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.photo.large_width</code>.
     */
    public void setLargeWidth(Short value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.photo.large_width</code>.
     */
    @Column(name = "large_width", precision = 16)
    public Short getLargeWidth() {
        return (Short) get(8);
    }

    /**
     * Setter for <code>public.photo.large_height</code>.
     */
    public void setLargeHeight(Short value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.photo.large_height</code>.
     */
    @Column(name = "large_height", precision = 16)
    public Short getLargeHeight() {
        return (Short) get(9);
    }

    /**
     * Setter for <code>public.photo.created_date</code>.
     */
    public void setCreatedDate(Timestamp value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.photo.created_date</code>.
     */
    @Column(name = "created_date", nullable = false)
    public Timestamp getCreatedDate() {
        return (Timestamp) get(10);
    }

    /**
     * Setter for <code>public.photo.modified_date</code>.
     */
    public void setModifiedDate(Timestamp value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.photo.modified_date</code>.
     */
    @Column(name = "modified_date", nullable = false)
    public Timestamp getModifiedDate() {
        return (Timestamp) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Integer, String, String, String, Short, Short, String, Short, Short, Timestamp, Timestamp> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Long, Integer, String, String, String, Short, Short, String, Short, Short, Timestamp, Timestamp> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Photo.PHOTO.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Photo.PHOTO.VERSION;
    }

    @Override
    public Field<String> field3() {
        return Photo.PHOTO.DESCRIPTION;
    }

    @Override
    public Field<String> field4() {
        return Photo.PHOTO.ORIGINAL_URL;
    }

    @Override
    public Field<String> field5() {
        return Photo.PHOTO.THUMB_URL;
    }

    @Override
    public Field<Short> field6() {
        return Photo.PHOTO.THUMB_WIDTH;
    }

    @Override
    public Field<Short> field7() {
        return Photo.PHOTO.THUMB_HEIGHT;
    }

    @Override
    public Field<String> field8() {
        return Photo.PHOTO.LARGE_URL;
    }

    @Override
    public Field<Short> field9() {
        return Photo.PHOTO.LARGE_WIDTH;
    }

    @Override
    public Field<Short> field10() {
        return Photo.PHOTO.LARGE_HEIGHT;
    }

    @Override
    public Field<Timestamp> field11() {
        return Photo.PHOTO.CREATED_DATE;
    }

    @Override
    public Field<Timestamp> field12() {
        return Photo.PHOTO.MODIFIED_DATE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public String component4() {
        return getOriginalUrl();
    }

    @Override
    public String component5() {
        return getThumbUrl();
    }

    @Override
    public Short component6() {
        return getThumbWidth();
    }

    @Override
    public Short component7() {
        return getThumbHeight();
    }

    @Override
    public String component8() {
        return getLargeUrl();
    }

    @Override
    public Short component9() {
        return getLargeWidth();
    }

    @Override
    public Short component10() {
        return getLargeHeight();
    }

    @Override
    public Timestamp component11() {
        return getCreatedDate();
    }

    @Override
    public Timestamp component12() {
        return getModifiedDate();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public String value4() {
        return getOriginalUrl();
    }

    @Override
    public String value5() {
        return getThumbUrl();
    }

    @Override
    public Short value6() {
        return getThumbWidth();
    }

    @Override
    public Short value7() {
        return getThumbHeight();
    }

    @Override
    public String value8() {
        return getLargeUrl();
    }

    @Override
    public Short value9() {
        return getLargeWidth();
    }

    @Override
    public Short value10() {
        return getLargeHeight();
    }

    @Override
    public Timestamp value11() {
        return getCreatedDate();
    }

    @Override
    public Timestamp value12() {
        return getModifiedDate();
    }

    @Override
    public PhotoRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PhotoRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public PhotoRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public PhotoRecord value4(String value) {
        setOriginalUrl(value);
        return this;
    }

    @Override
    public PhotoRecord value5(String value) {
        setThumbUrl(value);
        return this;
    }

    @Override
    public PhotoRecord value6(Short value) {
        setThumbWidth(value);
        return this;
    }

    @Override
    public PhotoRecord value7(Short value) {
        setThumbHeight(value);
        return this;
    }

    @Override
    public PhotoRecord value8(String value) {
        setLargeUrl(value);
        return this;
    }

    @Override
    public PhotoRecord value9(Short value) {
        setLargeWidth(value);
        return this;
    }

    @Override
    public PhotoRecord value10(Short value) {
        setLargeHeight(value);
        return this;
    }

    @Override
    public PhotoRecord value11(Timestamp value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public PhotoRecord value12(Timestamp value) {
        setModifiedDate(value);
        return this;
    }

    @Override
    public PhotoRecord values(Long value1, Integer value2, String value3, String value4, String value5, Short value6, Short value7, String value8, Short value9, Short value10, Timestamp value11, Timestamp value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PhotoRecord
     */
    public PhotoRecord() {
        super(Photo.PHOTO);
    }

    /**
     * Create a detached, initialised PhotoRecord
     */
    public PhotoRecord(Long id, Integer version, String description, String originalUrl, String thumbUrl, Short thumbWidth, Short thumbHeight, String largeUrl, Short largeWidth, Short largeHeight, Timestamp createdDate, Timestamp modifiedDate) {
        super(Photo.PHOTO);

        set(0, id);
        set(1, version);
        set(2, description);
        set(3, originalUrl);
        set(4, thumbUrl);
        set(5, thumbWidth);
        set(6, thumbHeight);
        set(7, largeUrl);
        set(8, largeWidth);
        set(9, largeHeight);
        set(10, createdDate);
        set(11, modifiedDate);
    }
}
