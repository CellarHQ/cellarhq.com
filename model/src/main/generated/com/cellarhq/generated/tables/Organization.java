/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables;


import com.cellarhq.generated.Indexes;
import com.cellarhq.generated.Keys;
import com.cellarhq.generated.Public;
import com.cellarhq.generated.tables.records.OrganizationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organization extends TableImpl<OrganizationRecord> {

    private static final long serialVersionUID = 1592834483;

    /**
     * The reference instance of <code>public.organization</code>
     */
    public static final Organization ORGANIZATION = new Organization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationRecord> getRecordType() {
        return OrganizationRecord.class;
    }

    /**
     * The column <code>public.organization.id</code>.
     */
    public final TableField<OrganizationRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.organization.version</code>.
     */
    public final TableField<OrganizationRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.organization.photo_id</code>.
     */
    public final TableField<OrganizationRecord, Long> PHOTO_ID = createField(DSL.name("photo_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.organization.type</code>.
     */
    public final TableField<OrganizationRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.organization.slug</code>.
     */
    public final TableField<OrganizationRecord, String> SLUG = createField(DSL.name("slug"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.organization.name</code>.
     */
    public final TableField<OrganizationRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.organization.description</code>.
     */
    public final TableField<OrganizationRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organization.established</code>.
     */
    public final TableField<OrganizationRecord, Short> ESTABLISHED = createField(DSL.name("established"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.organization.phone</code>.
     */
    public final TableField<OrganizationRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.organization.website</code>.
     */
    public final TableField<OrganizationRecord, String> WEBSITE = createField(DSL.name("website"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organization.address</code>.
     */
    public final TableField<OrganizationRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organization.address2</code>.
     */
    public final TableField<OrganizationRecord, String> ADDRESS2 = createField(DSL.name("address2"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organization.locality</code>.
     */
    public final TableField<OrganizationRecord, String> LOCALITY = createField(DSL.name("locality"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organization.postal_code</code>.
     */
    public final TableField<OrganizationRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.organization.country</code>.
     */
    public final TableField<OrganizationRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organization.brewery_db_id</code>.
     */
    public final TableField<OrganizationRecord, String> BREWERY_DB_ID = createField(DSL.name("brewery_db_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.organization.brewery_db_last_updated</code>.
     */
    public final TableField<OrganizationRecord, LocalDateTime> BREWERY_DB_LAST_UPDATED = createField(DSL.name("brewery_db_last_updated"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.organization.locked</code>.
     */
    public final TableField<OrganizationRecord, Boolean> LOCKED = createField(DSL.name("locked"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.organization.needs_moderation</code>.
     */
    public final TableField<OrganizationRecord, Boolean> NEEDS_MODERATION = createField(DSL.name("needs_moderation"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.organization.created_date</code>.
     */
    public final TableField<OrganizationRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.organization.modified_date</code>.
     */
    public final TableField<OrganizationRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.organization.data</code>.
     */
    public final TableField<OrganizationRecord, JSON> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.JSON, this, "");

    /**
     * The column <code>public.organization.region</code>.
     */
    public final TableField<OrganizationRecord, String> REGION = createField(DSL.name("region"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organization.warning_flag</code>.
     */
    public final TableField<OrganizationRecord, Boolean> WARNING_FLAG = createField(DSL.name("warning_flag"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.organization.total_beers</code>.
     */
    public final TableField<OrganizationRecord, Short> TOTAL_BEERS = createField(DSL.name("total_beers"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.organization.cellared_beers</code>.
     */
    public final TableField<OrganizationRecord, Short> CELLARED_BEERS = createField(DSL.name("cellared_beers"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.organization.contained_in_cellars</code>.
     */
    public final TableField<OrganizationRecord, Short> CONTAINED_IN_CELLARS = createField(DSL.name("contained_in_cellars"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.organization.locality_sort</code>.
     */
    public final TableField<OrganizationRecord, String> LOCALITY_SORT = createField(DSL.name("locality_sort"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organization.collaboration</code>.
     */
    public final TableField<OrganizationRecord, Boolean> COLLABORATION = createField(DSL.name("collaboration"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.organization</code> table reference
     */
    public Organization() {
        this(DSL.name("organization"), null);
    }

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    public Organization(String alias) {
        this(DSL.name(alias), ORGANIZATION);
    }

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    public Organization(Name alias) {
        this(alias, ORGANIZATION);
    }

    private Organization(Name alias, Table<OrganizationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Organization(Name alias, Table<OrganizationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Organization(Table<O> child, ForeignKey<O, OrganizationRecord> key) {
        super(child, key, ORGANIZATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORGANIZATION_PKEY, Indexes.UNQ_ORGANIZATION_SLUG);
    }

    @Override
    public UniqueKey<OrganizationRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_PKEY;
    }

    @Override
    public List<UniqueKey<OrganizationRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganizationRecord>>asList(Keys.ORGANIZATION_PKEY, Keys.UNQ_ORGANIZATION_SLUG);
    }

    @Override
    public List<ForeignKey<OrganizationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrganizationRecord, ?>>asList(Keys.ORGANIZATION__FK_ORGANIZATION_PHOTO_ID);
    }

    public Photo photo() {
        return new Photo(this, Keys.ORGANIZATION__FK_ORGANIZATION_PHOTO_ID);
    }

    @Override
    public Organization as(String alias) {
        return new Organization(DSL.name(alias), this);
    }

    @Override
    public Organization as(Name alias) {
        return new Organization(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organization rename(String name) {
        return new Organization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organization rename(Name name) {
        return new Organization(name, null);
    }
}
