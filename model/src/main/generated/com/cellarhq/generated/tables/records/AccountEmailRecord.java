/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables.records;


import com.cellarhq.generated.tables.AccountEmail;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "account_email", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "pk_account_email", columnNames = {"id"}),
    @UniqueConstraint(name = "unq_account_email_email", columnNames = {"email"})
}, indexes = {
    @Index(name = "idx_account_email_email", columnList = "email ASC"),
    @Index(name = "pk_account_email", unique = true, columnList = "id ASC"),
    @Index(name = "unq_account_email_email", unique = true, columnList = "email ASC")
})
public class AccountEmailRecord extends UpdatableRecordImpl<AccountEmailRecord> implements Record9<Long, Integer, Long, String, String, Timestamp, Timestamp, Timestamp, Short> {

    private static final long serialVersionUID = -840234981;

    /**
     * Setter for <code>public.account_email.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.account_email.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 64)
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.account_email.version</code>.
     */
    public void setVersion(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.account_email.version</code>.
     */
    @Column(name = "version", nullable = false, precision = 32)
    public Integer getVersion() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.account_email.cellar_id</code>.
     */
    public void setCellarId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.account_email.cellar_id</code>.
     */
    @Column(name = "cellar_id", nullable = false, precision = 64)
    public Long getCellarId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.account_email.email</code>.
     */
    public void setEmail(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.account_email.email</code>.
     */
    @Column(name = "email", nullable = false, length = 255)
    public String getEmail() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.account_email.password</code>.
     */
    public void setPassword(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.account_email.password</code>.
     */
    @Column(name = "password", nullable = false, length = 60)
    public String getPassword() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.account_email.created_date</code>.
     */
    public void setCreatedDate(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.account_email.created_date</code>.
     */
    @Column(name = "created_date", nullable = false)
    public Timestamp getCreatedDate() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>public.account_email.modified_date</code>.
     */
    public void setModifiedDate(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.account_email.modified_date</code>.
     */
    @Column(name = "modified_date", nullable = false)
    public Timestamp getModifiedDate() {
        return (Timestamp) get(6);
    }

    /**
     * Setter for <code>public.account_email.last_login_attempt</code>.
     */
    public void setLastLoginAttempt(Timestamp value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.account_email.last_login_attempt</code>.
     */
    @Column(name = "last_login_attempt")
    public Timestamp getLastLoginAttempt() {
        return (Timestamp) get(7);
    }

    /**
     * Setter for <code>public.account_email.login_attempt_counter</code>.
     */
    public void setLoginAttemptCounter(Short value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.account_email.login_attempt_counter</code>.
     */
    @Column(name = "login_attempt_counter", nullable = false, precision = 16)
    public Short getLoginAttemptCounter() {
        return (Short) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Long, String, String, Timestamp, Timestamp, Timestamp, Short> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Integer, Long, String, String, Timestamp, Timestamp, Timestamp, Short> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AccountEmail.ACCOUNT_EMAIL.ID;
    }

    @Override
    public Field<Integer> field2() {
        return AccountEmail.ACCOUNT_EMAIL.VERSION;
    }

    @Override
    public Field<Long> field3() {
        return AccountEmail.ACCOUNT_EMAIL.CELLAR_ID;
    }

    @Override
    public Field<String> field4() {
        return AccountEmail.ACCOUNT_EMAIL.EMAIL;
    }

    @Override
    public Field<String> field5() {
        return AccountEmail.ACCOUNT_EMAIL.PASSWORD;
    }

    @Override
    public Field<Timestamp> field6() {
        return AccountEmail.ACCOUNT_EMAIL.CREATED_DATE;
    }

    @Override
    public Field<Timestamp> field7() {
        return AccountEmail.ACCOUNT_EMAIL.MODIFIED_DATE;
    }

    @Override
    public Field<Timestamp> field8() {
        return AccountEmail.ACCOUNT_EMAIL.LAST_LOGIN_ATTEMPT;
    }

    @Override
    public Field<Short> field9() {
        return AccountEmail.ACCOUNT_EMAIL.LOGIN_ATTEMPT_COUNTER;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getVersion();
    }

    @Override
    public Long component3() {
        return getCellarId();
    }

    @Override
    public String component4() {
        return getEmail();
    }

    @Override
    public String component5() {
        return getPassword();
    }

    @Override
    public Timestamp component6() {
        return getCreatedDate();
    }

    @Override
    public Timestamp component7() {
        return getModifiedDate();
    }

    @Override
    public Timestamp component8() {
        return getLastLoginAttempt();
    }

    @Override
    public Short component9() {
        return getLoginAttemptCounter();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getVersion();
    }

    @Override
    public Long value3() {
        return getCellarId();
    }

    @Override
    public String value4() {
        return getEmail();
    }

    @Override
    public String value5() {
        return getPassword();
    }

    @Override
    public Timestamp value6() {
        return getCreatedDate();
    }

    @Override
    public Timestamp value7() {
        return getModifiedDate();
    }

    @Override
    public Timestamp value8() {
        return getLastLoginAttempt();
    }

    @Override
    public Short value9() {
        return getLoginAttemptCounter();
    }

    @Override
    public AccountEmailRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountEmailRecord value2(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public AccountEmailRecord value3(Long value) {
        setCellarId(value);
        return this;
    }

    @Override
    public AccountEmailRecord value4(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public AccountEmailRecord value5(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public AccountEmailRecord value6(Timestamp value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public AccountEmailRecord value7(Timestamp value) {
        setModifiedDate(value);
        return this;
    }

    @Override
    public AccountEmailRecord value8(Timestamp value) {
        setLastLoginAttempt(value);
        return this;
    }

    @Override
    public AccountEmailRecord value9(Short value) {
        setLoginAttemptCounter(value);
        return this;
    }

    @Override
    public AccountEmailRecord values(Long value1, Integer value2, Long value3, String value4, String value5, Timestamp value6, Timestamp value7, Timestamp value8, Short value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountEmailRecord
     */
    public AccountEmailRecord() {
        super(AccountEmail.ACCOUNT_EMAIL);
    }

    /**
     * Create a detached, initialised AccountEmailRecord
     */
    public AccountEmailRecord(Long id, Integer version, Long cellarId, String email, String password, Timestamp createdDate, Timestamp modifiedDate, Timestamp lastLoginAttempt, Short loginAttemptCounter) {
        super(AccountEmail.ACCOUNT_EMAIL);

        set(0, id);
        set(1, version);
        set(2, cellarId);
        set(3, email);
        set(4, password);
        set(5, createdDate);
        set(6, modifiedDate);
        set(7, lastLoginAttempt);
        set(8, loginAttemptCounter);
    }
}
