/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables;


import com.cellarhq.generated.Indexes;
import com.cellarhq.generated.Keys;
import com.cellarhq.generated.Public;
import com.cellarhq.generated.tables.records.CellarRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cellar extends TableImpl<CellarRecord> {

    private static final long serialVersionUID = -425493556;

    /**
     * The reference instance of <code>public.cellar</code>
     */
    public static final Cellar CELLAR = new Cellar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CellarRecord> getRecordType() {
        return CellarRecord.class;
    }

    /**
     * The column <code>public.cellar.id</code>.
     */
    public final TableField<CellarRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.cellar.version</code>.
     */
    public final TableField<CellarRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cellar.photo_id</code>.
     */
    public final TableField<CellarRecord, Long> PHOTO_ID = createField(DSL.name("photo_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.cellar.screen_name</code>.
     */
    public final TableField<CellarRecord, String> SCREEN_NAME = createField(DSL.name("screen_name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.cellar.display_name</code>.
     */
    public final TableField<CellarRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.cellar.location</code>.
     */
    public final TableField<CellarRecord, String> LOCATION = createField(DSL.name("location"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.cellar.website</code>.
     */
    public final TableField<CellarRecord, String> WEBSITE = createField(DSL.name("website"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.cellar.bio</code>.
     */
    public final TableField<CellarRecord, String> BIO = createField(DSL.name("bio"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.cellar.update_from_network</code>.
     */
    public final TableField<CellarRecord, Boolean> UPDATE_FROM_NETWORK = createField(DSL.name("update_from_network"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.cellar.contact_email</code>.
     */
    public final TableField<CellarRecord, String> CONTACT_EMAIL = createField(DSL.name("contact_email"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.cellar.private</code>.
     */
    public final TableField<CellarRecord, Boolean> PRIVATE = createField(DSL.name("private"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.cellar.last_login</code>.
     */
    public final TableField<CellarRecord, LocalDateTime> LAST_LOGIN = createField(DSL.name("last_login"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.cellar.last_login_ip</code>.
     */
    public final TableField<CellarRecord, String> LAST_LOGIN_IP = createField(DSL.name("last_login_ip"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.cellar.created_date</code>.
     */
    public final TableField<CellarRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.cellar.modified_date</code>.
     */
    public final TableField<CellarRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.cellar.twitter</code>.
     */
    public final TableField<CellarRecord, String> TWITTER = createField(DSL.name("twitter"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>public.cellar.reddit</code>.
     */
    public final TableField<CellarRecord, String> REDDIT = createField(DSL.name("reddit"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.cellar.beeradvocate</code>.
     */
    public final TableField<CellarRecord, String> BEERADVOCATE = createField(DSL.name("beeradvocate"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.cellar.ratebeer</code>.
     */
    public final TableField<CellarRecord, String> RATEBEER = createField(DSL.name("ratebeer"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.cellar.total_beers</code>.
     */
    public final TableField<CellarRecord, Short> TOTAL_BEERS = createField(DSL.name("total_beers"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.cellar.unique_beers</code>.
     */
    public final TableField<CellarRecord, Short> UNIQUE_BEERS = createField(DSL.name("unique_beers"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.cellar.unique_breweries</code>.
     */
    public final TableField<CellarRecord, Short> UNIQUE_BREWERIES = createField(DSL.name("unique_breweries"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.cellar.has_tradeable_beers</code>.
     */
    public final TableField<CellarRecord, Boolean> HAS_TRADEABLE_BEERS = createField(DSL.name("has_tradeable_beers"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.cellar.slug</code>.
     */
    public final TableField<CellarRecord, String> SLUG = createField(DSL.name("slug"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.cellar.role</code>.
     */
    public final TableField<CellarRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'member'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.cellar</code> table reference
     */
    public Cellar() {
        this(DSL.name("cellar"), null);
    }

    /**
     * Create an aliased <code>public.cellar</code> table reference
     */
    public Cellar(String alias) {
        this(DSL.name(alias), CELLAR);
    }

    /**
     * Create an aliased <code>public.cellar</code> table reference
     */
    public Cellar(Name alias) {
        this(alias, CELLAR);
    }

    private Cellar(Name alias, Table<CellarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cellar(Name alias, Table<CellarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cellar(Table<O> child, ForeignKey<O, CellarRecord> key) {
        super(child, key, CELLAR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CELLAR_PKEY, Indexes.CELLAR_SLUG_UNIQUE_CONSTRAINT, Indexes.UNQ_CELLAR_SCREEN_NAME);
    }

    @Override
    public UniqueKey<CellarRecord> getPrimaryKey() {
        return Keys.CELLAR_PKEY;
    }

    @Override
    public List<UniqueKey<CellarRecord>> getKeys() {
        return Arrays.<UniqueKey<CellarRecord>>asList(Keys.CELLAR_PKEY, Keys.UNQ_CELLAR_SCREEN_NAME, Keys.CELLAR_SLUG_UNIQUE_CONSTRAINT);
    }

    @Override
    public List<ForeignKey<CellarRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CellarRecord, ?>>asList(Keys.CELLAR__FK_CELLAR_PHOTO_ID);
    }

    public Photo photo() {
        return new Photo(this, Keys.CELLAR__FK_CELLAR_PHOTO_ID);
    }

    @Override
    public Cellar as(String alias) {
        return new Cellar(DSL.name(alias), this);
    }

    @Override
    public Cellar as(Name alias) {
        return new Cellar(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cellar rename(String name) {
        return new Cellar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cellar rename(Name name) {
        return new Cellar(name, null);
    }
}
