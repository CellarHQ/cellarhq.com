/*
 * This file is generated by jOOQ.
 */
package com.cellarhq.generated.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "photo", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "pk_photo", columnNames = {"id"}),
    @UniqueConstraint(name = "unq_photo_original_url", columnNames = {"original_url"})
}, indexes = {
    @Index(name = "pk_photo", unique = true, columnList = "id ASC"),
    @Index(name = "unq_photo_original_url", unique = true, columnList = "original_url ASC")
})
public class Photo implements Serializable {

    private static final long serialVersionUID = -1499316348;

    private Long      id;
    private Integer   version;
    private String    description;
    private String    originalUrl;
    private String    thumbUrl;
    private Short     thumbWidth;
    private Short     thumbHeight;
    private String    largeUrl;
    private Short     largeWidth;
    private Short     largeHeight;
    private Timestamp createdDate;
    private Timestamp modifiedDate;

    public Photo() {}

    public Photo(Photo value) {
        this.id = value.id;
        this.version = value.version;
        this.description = value.description;
        this.originalUrl = value.originalUrl;
        this.thumbUrl = value.thumbUrl;
        this.thumbWidth = value.thumbWidth;
        this.thumbHeight = value.thumbHeight;
        this.largeUrl = value.largeUrl;
        this.largeWidth = value.largeWidth;
        this.largeHeight = value.largeHeight;
        this.createdDate = value.createdDate;
        this.modifiedDate = value.modifiedDate;
    }

    public Photo(
        Long      id,
        Integer   version,
        String    description,
        String    originalUrl,
        String    thumbUrl,
        Short     thumbWidth,
        Short     thumbHeight,
        String    largeUrl,
        Short     largeWidth,
        Short     largeHeight,
        Timestamp createdDate,
        Timestamp modifiedDate
    ) {
        this.id = id;
        this.version = version;
        this.description = description;
        this.originalUrl = originalUrl;
        this.thumbUrl = thumbUrl;
        this.thumbWidth = thumbWidth;
        this.thumbHeight = thumbHeight;
        this.largeUrl = largeUrl;
        this.largeWidth = largeWidth;
        this.largeHeight = largeHeight;
        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 64)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Column(name = "version", nullable = false, precision = 32)
    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    @Column(name = "description", nullable = false)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "original_url", nullable = false, length = 500)
    public String getOriginalUrl() {
        return this.originalUrl;
    }

    public void setOriginalUrl(String originalUrl) {
        this.originalUrl = originalUrl;
    }

    @Column(name = "thumb_url", length = 500)
    public String getThumbUrl() {
        return this.thumbUrl;
    }

    public void setThumbUrl(String thumbUrl) {
        this.thumbUrl = thumbUrl;
    }

    @Column(name = "thumb_width", precision = 16)
    public Short getThumbWidth() {
        return this.thumbWidth;
    }

    public void setThumbWidth(Short thumbWidth) {
        this.thumbWidth = thumbWidth;
    }

    @Column(name = "thumb_height", precision = 16)
    public Short getThumbHeight() {
        return this.thumbHeight;
    }

    public void setThumbHeight(Short thumbHeight) {
        this.thumbHeight = thumbHeight;
    }

    @Column(name = "large_url", length = 500)
    public String getLargeUrl() {
        return this.largeUrl;
    }

    public void setLargeUrl(String largeUrl) {
        this.largeUrl = largeUrl;
    }

    @Column(name = "large_width", precision = 16)
    public Short getLargeWidth() {
        return this.largeWidth;
    }

    public void setLargeWidth(Short largeWidth) {
        this.largeWidth = largeWidth;
    }

    @Column(name = "large_height", precision = 16)
    public Short getLargeHeight() {
        return this.largeHeight;
    }

    public void setLargeHeight(Short largeHeight) {
        this.largeHeight = largeHeight;
    }

    @Column(name = "created_date", nullable = false)
    public Timestamp getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(Timestamp createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "modified_date", nullable = false)
    public Timestamp getModifiedDate() {
        return this.modifiedDate;
    }

    public void setModifiedDate(Timestamp modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Photo (");

        sb.append(id);
        sb.append(", ").append(version);
        sb.append(", ").append(description);
        sb.append(", ").append(originalUrl);
        sb.append(", ").append(thumbUrl);
        sb.append(", ").append(thumbWidth);
        sb.append(", ").append(thumbHeight);
        sb.append(", ").append(largeUrl);
        sb.append(", ").append(largeWidth);
        sb.append(", ").append(largeHeight);
        sb.append(", ").append(createdDate);
        sb.append(", ").append(modifiedDate);

        sb.append(")");
        return sb.toString();
    }
}
