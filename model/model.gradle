buildscript {
  repositories {
    jcenter()
    maven { url "http://oss.jfrog.org/repo" }
  }
  dependencies {
    classpath databaseDriver
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'org.liquibase.gradle' version '1.2.1'
}

apply plugin: 'liquibase'
apply plugin: 'groovy'

repositories {
  jcenter()
  maven { url "http://oss.jfrog.org/repo" }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.4'
  compile databaseDriver
  compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
  compile "org.jooq:jooq:${jooqVersion}"
  compile "org.jooq:jooq-meta:${jooqVersion}"
  compile "org.jooq:jooq-codegen:${jooqVersion}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

liquibase {
  activities {
    development {
      changeLogFile "${rootDir}/model/migrations/migrations.xml"
      url 'jdbc:postgresql://localhost:15432/cellarhq'
      username 'cellarhq'
      password 'cellarhq'
    }

    testing {
      changeLogFile "${rootDir}/model/migrations/migrations.xml"
      url 'jdbc:postgresql://localhost:15432/cellarhq_testing'
      username 'cellarhq'
      password 'cellarhq'
    }

    production {
      if (System.getenv("DATABASE_URL")) {
        URI dbUri = new URI(System.getenv("DATABASE_URL"));

        String herokuUsername = dbUri.getUserInfo().split(":")[0];
        String herokuPassword = dbUri.getUserInfo().split(":")[1];
        String herokuJdbc = "jdbc:postgresql://" + dbUri.getHost() + ':' + dbUri.getPort() + dbUri.getPath();

        changeLogFile "${rootDir}/model/migrations/migrations.xml"
        url herokuJdbc
        username herokuUsername
        password herokuPassword
      }
    }
  }

  if (project.hasProperty('runList')) {
    runList = project.property('runList')
  } else {
    if (rootProject.gradle.startParameter.taskNames.contains('test')
      || rootProject.gradle.startParameter.taskNames.contains('check')) {
      runList = 'testing'
    } else {
      runList = 'development'
    }
  }
}

task generateJooq(type: JavaExec, dependsOn: ['classes', 'update']) {
  main = 'org.jooq.util.GenerationTool'
  classpath = sourceSets.main.runtimeClasspath
  args 'jooq.xml'
}
